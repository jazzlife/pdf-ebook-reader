using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;
using PdfBookReader.Render;
using PdfBookReaderTest.TestUtils;
using System.IO;
using System.Drawing;
using PdfBookReader.Model;
using PdfBookReader.Utils;

namespace PdfBookReaderTest.Render
{
    [TestFixture]
    class ScreenRenderPerf
    {
        Size ScreenSize = new Size(800, 600);

        // Test on 3 different PDFs
        // RenderNext, RenderPrev, Render(page)

        [Test]
        public void RenderNormalFileNoCache()
        {
            RenderOneFile(new PTimer("Render"), 
                Path.Combine(TestConst.PdfFilePath, @"Clean Margins Pictures - Balasevic.pdf"));
        }

        [Test]
        public void RenderBigSlowFileNoCache()
        {
            RenderOneFile(new PTimer("Render"),
                Path.Combine(TestConst.PdfFilePath, @"Bad Scan Tilted Facing Pages Big - Solzhenitsyn.pdf"));
        }

        void RenderOneFile(PTimer timer, String file)
        {
            var library = GetOneBookLibrary(file);
            var renderMgr = new ScreenRenderManager(library, ScreenSize);

            var book = library.CurrentBook;

            const int RenderNextRepeats = 10;
            const int RenderMiddleRepeats = 5;
            const int RenderResizeRepeats = 3;
            const int RenderPreviousRepeats = 5;

            PTimer fileTimer = new PTimer("{0} file: {1}", timer.Name, Path.GetFileName(file));

            // Render first, forward
            using(IDisposable a = timer.NewRun, b = fileTimer.NewRun)
            {
                renderMgr.Render(null);
            }
            for (int i = 0; i < RenderNextRepeats; i++)
            {
                using (IDisposable a = timer.NewRun, b = fileTimer.NewRun)
                {
                    renderMgr.RenderNext();
                }
            }

            // Render middle and re-render
            int middle = book.CurrentPosition.PageCount / 2;            
            for (int i = 0; i < RenderMiddleRepeats; i++)
            {
                using (IDisposable a = timer.NewRun, b = fileTimer.NewRun)
                {
                    PositionInBook pos = PositionInBook.FromPositionUnit(middle, book.CurrentPosition.PageCount);
                    renderMgr.Render(pos);
                }
            }

            // Render at different sizes
            for (int i = 0; i < RenderResizeRepeats; i++)
            {
                // Render at different size
                Size newSize = new Size((int)(renderMgr.ScreenSize.Width * 1.2), (int)(renderMgr.ScreenSize.Height * 1.2));
                renderMgr.ScreenSize = newSize;
                renderMgr.Render(book.CurrentPosition);
            }
            using (IDisposable a = timer.NewRun, b = fileTimer.NewRun)
            {
                renderMgr.ScreenSize = ScreenSize;
                renderMgr.Render(book.CurrentPosition); // back to normal
            }

            // Render last, backward
            using (IDisposable a = timer.NewRun, b = fileTimer.NewRun)
            {
                renderMgr.Render(PositionInBook.FromPositionUnit(0.99f * book.CurrentPosition.PageCount, book.CurrentPosition.PageCount); 
            }
            for (int i = 0; i < RenderPreviousRepeats; i++)
            {
                using (IDisposable a = timer.NewRun, b = fileTimer.NewRun)
                {
                    renderMgr.RenderPrevious(contentSource);
                }
            }

            Console.WriteLine();
            Console.Write(fileTimer);
        }

        BookLibrary GetOneBookLibrary(String bookFile)
        {
            // Load from non-existing temp file to prevent saving to real library
            String file = Path.GetTempFileName();
            File.Delete(file);

            var lib = BookLibrary.Load(file);
            lib.AddBook(new Book(bookFile));
            lib.CurrentBook = lib.Books.First();

            return lib;
        }
    }
}
